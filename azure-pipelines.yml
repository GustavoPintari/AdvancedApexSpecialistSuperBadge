trigger: none
resources:
  webhooks:
    - webhook: AutoBranch     ### Webhook name
      connection: AutoBranch  ### Incoming webhook service connection name

variables:
  - group: GitHub Pipeline
  
steps:
- checkout: self
  persistCredentials: true
  
- script: |
    echo "${MY_JSON}"
  env:
    MY_JSON: ${{ convertToJson(parameters) }}
  displayName: "Resource json"

- script: |
    path="${RESOURCE_PATH}"

    if [[ "$EVENT_TYPE" == "workitem.updated" ]]; then
      path="${REVISION_PATH}"
    fi

    workItemId=$(echo "$path" | jq -r '.id')
    createBranch=$(echo "$path" | jq -r '.fields["Custom.Criarbranch"]')
    workItemType=$(echo "$path" | jq -r '.fields["System.WorkItemType"]')
    parentWorkItemId=$(echo "$path" | jq -r '.fields["System.Parent"] // empty')

    echo "WORK_ITEM_ID=${workItemId}"
    echo "CREATE_BRANCH=${createBranch}"
    echo "WORK_ITEM_TYPE=${workItemType}"
    echo "PARENT_WORK_ITEM_ID=${parentWorkItemId}"

    echo "##vso[task.setvariable variable=WORK_ITEM_ID]${workItemId}"
    echo "##vso[task.setvariable variable=WORK_ITEM_TYPE]${workItemType}"
    echo "##vso[task.setvariable variable=CREATE_BRANCH]${createBranch}"
    echo "##vso[task.setvariable variable=PARENT_WORK_ITEM_ID]${parentWorkItemId}"
  env:
    EVENT_TYPE: ${{ parameters.AutoBranch.eventType }}
    RESOURCE_PATH: ${{ convertToJson(parameters.AutoBranch.resource) }}
    REVISION_PATH: ${{ convertToJson(parameters.AutoBranch.resource.revision) }}
  displayName: "Set global variables"
  
- script: |
    if [[ -z "$WORK_ITEM_ID" ]]; then
      echo "##vso[task.logissue type=error]Work item ID not found."
      exit 1
    fi

    if [[ ! "$WORK_ITEM_TYPE" =~ ^($VALID_WORK_ITEM_TYPES)$ ]]; then
      echo "##vso[task.logissue type=error]Exit on Work item $WORK_ITEM_ID - Invalid type."
      exit 1
    fi

    if [[ "$CREATE_BRANCH" == "false" ]]; then
      echo "##vso[task.logissue type=error]createBranch is set to false on work item $WORK_ITEM_ID."
      exit 1
    fi
  displayName: "Validate"

- script: |
    gh auth status
  env:
    GITHUB_TOKEN: $(GH_TOKEN)
  displayName: "Check Github authentication"
  
- script: |
    git config --global user.name $(GIT_USER_NAME)
    git config --global user.email $(GIT_USER_EMAIL)
  displayName: "Configure Git identity"

- script: |
    baseBrach=$(BASE_BRANCH)
    prTitle="AB#$WORK_ITEM_ID"

    if [[ "$WORK_ITEM_TYPE" == "Feature" ]]; then
      branchPrefix="F-"
    else
      if [[ -z "$PARENT_WORK_ITEM_ID" ]]; then
        exit 1
      fi 

      parentBranch="F-${PARENT_WORK_ITEM_ID}"

      if ! git ls-remote --exit-code --heads origin $parentBranch > /dev/null; then
        echo "##vso[task.logissue type=error]Exit on Work item $WORK_ITEM_ID - Parent work item branch not found."
        exit 1
      fi 

      branchPrefix="T-"
      if [[ "$WORK_ITEM_TYPE" == "Impedimento" ]]; then
        branchPrefix="I-"
      fi

      prTitle="Fixed ${prTitle}"
      baseBrach="F-${PARENT_WORK_ITEM_ID}"
    fi

    newBranch="${branchPrefix}${WORK_ITEM_ID}"
    
    git fetch origin $baseBrach

    git checkout -b $newBranch origin/$baseBrach
    git push origin $newBranch

    if [[ "$MAKE_PR" == "true" ]]; then
      echo "Este é um arquivo criado automaticamente pela pipeline na branch $newBranch" > pipeline.txt
      
      git add pipeline.txt
      git commit -m "Pipeline"
      git push origin $newBranch

      gh pr create --base "$baseBrach" --head "$newBranch" --title "$prTitle" --body "Azure devops"
    fi
  env:
    GITHUB_TOKEN: $(GH_TOKEN)
  displayName: "Create branch and PR"

- script: |
    echo "Atualizando Work Item #$workItemId"

    uri="https://dev.azure.com/gustavopintari0575/gustavopintari/_apis/wit/workitems/${WORK_ITEM_ID}?api-version=7.1-preview.3"

    json_payload='[
      {
        "op": "add",
        "path": "/fields/System.Title",
        "value": "Título atualizado via Bash"
      }
    ]'

    # Convertendo o token de acesso para Base64
    auth=$(echo -n ":$pat" | base64)

    # Fazendo a chamada PATCH
    curl -X PATCH "$uri" \
      -H "Content-Type: application/json-patch+json" \
      -H "Authorization: Basic $auth" \
      -d "$json_payload"
  env:
    pat: $(System.AccessToken)  # usa token do sistema, habilite nas configurações do pipeline
  displayName: 'Atualizar Work Item via Bash'