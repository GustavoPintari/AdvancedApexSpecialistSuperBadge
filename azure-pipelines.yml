# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
resources:
  webhooks:
    - webhook: Incoming     ### Webhook name
      connection: Incoming  ### Incoming webhook service connection name

variables:
  - group: GitHub Pipeline
  
steps:
- checkout: self
  persistCredentials: true

- script : |
    echo "##vso[task.setvariable variable=WORK_ITEM_ID]${WORK_ITEM_ID}"
    echo "##vso[task.setvariable variable=WORK_ITEM_TYPE]${WORK_ITEM_TYPE}"
    echo "##vso[task.setvariable variable=PARENT_WORK_ITEM_ID]${PARENT_WORK_ITEM_ID}"
    
    if [[ -z "$WORK_ITEM_ID" ]] || [[ ! "$WORK_ITEM_TYPE" =~ ^($VALID_WORK_ITEM_TYPES)$ ]]; then
      exit 1
    fi
  env:
    WORK_ITEM_ID: ${{ parameters.Incoming.resource.id }}
    WORK_ITEM_TYPE: ${{ parameters.Incoming.resource.fields['System.WorkItemType'] }}
    PARENT_WORK_ITEM_ID: ${{ parameters.Incoming.resource.fields['System.Parent'] }}
  displayName: "Check incoming"
  
- script: |
    echo "${MY_JSON}"
  env:
    MY_JSON: ${{ convertToJson(parameters.Incoming.resource.fields) }}

- script: |
    gh auth status
  env:
    GITHUB_TOKEN: $(GH_TOKEN)
  displayName: "Verificar autenticação no GitHub"
  
- script: |
    git config --global user.name $(GIT_USER_NAME)
    git config --global user.email $(GIT_USER_EMAIL)
  displayName: "Configurar identidade Git"

- script: |
    baseBrach="main"
    prTitle="AB#$WORK_ITEM_ID"

    if [[ "$WORK_ITEM_TYPE" == "Feature" ]]; then
      branchPrefix="F-"
    else
      if [[ -z "$PARENT_WORK_ITEM_ID" ]]; then
        exit 1
      fi 

      parentBranch="F-${PARENT_WORK_ITEM_ID}"

      if ! git ls-remote --exit-code --heads origin $parentBranch > /dev/null; then
        git fetch
        git checkout -b $parentBranch origin/$baseBrach
        git push origin $parentBranch
      fi 

      branchPrefix="T-"
      if [[ "$WORK_ITEM_TYPE" == "Impedimento" ]]; then
        branchPrefix="I-"
      fi

      prTitle="Fixed ${prTitle}"
      baseBrach="F-${PARENT_WORK_ITEM_ID}"
    fi

    newBranch="${branchPrefix}${WORK_ITEM_ID}"
    
    git fetch origin $baseBrach

    git checkout -b $newBranch origin/$baseBrach
    git push origin $newBranch

    if [[ "$MAKE_PR" == "true" ]]; then
      echo "Este é um arquivo criado automaticamente pela pipeline na branch $newBranch" > pipeline.txt
      
      git add pipeline.txt
      git commit -m "Pipeline"
      git push origin $newBranch

      gh pr create --base "$baseBrach" --head "$newBranch" --title "$prTitle" --body "Azure devops"
    fi
  env:
    GITHUB_TOKEN: $(GH_TOKEN)
  displayName: 'Criar nova branch no Git'